#!/bin/bash

#    Corey Carter, St. Paul, MN - 09 January 2018
#    This bash script is designed to pull contextual sequence flanking a SNP (variants) from a reference genome.
#    The window size for contextual sequence can be user specificed.
#    The program checks for the presence of more than one variant within user specified windows.

#     A bash dictionary for input parameters
#    SNP_CONTEXT Version: 2.0.0

declare -A projectDic=(
    ["windowLength"]=1 #-w
    ["inputFile"]='' #-i
    ["inputLoc"]=''
    ["outputLoc"]='' #-o
    ["filename"]=''
    ["projectName"]='out' #-p
    ["flanks"]=0 #-f
    ["referenceGenomeChar"]=''
    ["referenceGenome"]='' #-r
    ["OperationalStage"]='vcfTObed'
    ["nMax"]=25 ##-n
    ["TempLoc"]=''
    ["tempOut"]=''
    ["allData"]='false' #-ad
    ["s3"]='false' #-s3
    ["s3User"]='' 
    ["S3Password"]='' 
    
)

#     A bash list of all possible nucleotide state transitions
declare -a dirL=('AtoC' 'AtoG' 'AtoT' 'CtoA' 'CtoG' 'CtoT' 'GtoA' 'GtoC' 'GtoT' 'TtoA' 'TtoC' 'TtoG')

declare -a active=()

help_display(){ ## UPDATE TO INCLUDE ALL CMDS AND MENTION THE CONFIG FILE IS THE PREFERED WAY OF OPERATING
    local helpPrintOut=$'\n\tSNP context\n\tList of commands:\n\t------------------------\n'
    helpPrintOut+=$'\n\tSNPcontext -i <input VCF> -o <output> -r <reference genome> -w <expansion size> -f <flank size> -p <project name> -n <acceptable Indel %> -ad <saved all data>\n'
    helpPrintOut+=$'\n\t------------------------\n'
    helpPrintOut+=$'\n\t**Input arguments can be in ANY order.**\n'
    helpPrintOut+=$'\n\t-i [(complete path to VCF file) (the VCF input file)]\n\t-o [(complete path to location) (The output location, if not entered it will default to the same location as your input file.)]'
    helpPrintOut+=$'\n\t-r [(barley or b, soy bean or s )(Selects the reference genome, defaults to Barley if not specified.)]\n\t-w [(Expansion window size)(The expandable window size around the SNP location, 8 on both ends is the deafult.)]'
    helpPrintOut+=$'\n\t-p [project name]\n\t-n [max percentage of indels allowed in fasta files]'
    helpPrintOut+=$'\n\t-a [(true/false) Do you want all temp files (vcf,bed and fasta) to be saved in your output directory]'
    helpPrintOut+=$'\n\t-f [(number between 0 and 2) (flank size for aln_to_counts)]'
    helpPrintOut+=$'\n\t-n [(number)(The percentage of accepted indels in the FASTA file)]'
    helpPrintOut+=$'\n\t-ad [(true or false) (Which stands for “all data”, this allows you to keep all intermediate files (split VCFs, BED, new interval BEDs, FASTA files)\n\t    that are normally deleted after processing. Defaults to false, which deletes intermedidate files.)]\n'
    echo "$helpPrintOut"
    exit -0
}

config_check(){
    local args=($@)
    if (( "$#" >= 1 )); then
        # echo -e "LauraOne"
        # echo "$#"
        if (( "$#" == 1 )); then
            # echo -e "LauraTWO-PRIME"
            # echo -e "${args[0],,}"
            if [[ ${args[0],,} == "--help" ]] || [[ ${args[0],,} == "-h" ]]; then
                # echo -e "LauraTwo"
                help_display
            elif [[ -f "${args[0]}" ]] || [[ ! -z "${args[0]}" ]]; then
                # echo -e "LauraThree"
                local var=${args##*.} ## Grabs only the extension
                if [[ ${var,,} == "config" ]]; then ## Checks if it's a .config file
                    # echo -e "LauraBases"
                    isCmd="false"
                    source "${args[0]}"
                    declare -a startList=(
                        ${window_length}
                        ${input_file} # Declares unset variables (NULL), uses -v to check if NULL
                        ${output_location}
                        ${project_name}
                        ${flanks}
                        ${referenceGenome}
                        ${indel_max_amount}
                        ${save_all_data}
                        ${save_S3}
                        ${s3_login}
                        ${s3_password}
                    )
                    starter ${startList}
                fi
            fi
            echo -e "Invalid '.Config' file extension. Exiting..."
            exit 1
        elif (( "$#" > 1 )); then
            # echo -e "LAURA-MEGA"
            isCmd="true"
            startList=("$@")
            starter ${startList}
        fi
        echo -e "Invalid entries. Exiting..."
        exit 1
    else
        # echo -e "LauraBottom"
        help_display
    fi
}

#     Takes user arguments from command line and assigns values to dictionary keys in 'projectDic'
starter(){ #grabs the arguments
    # echo -e ${startList[@]}

    echo -e "STARTTT"
    local frontgate=0
    local indexPos=0
    # echo -e ${startList[@]}
    for i in ${startList[@]}; do
        # echo -e "${i}"
        if [[ "${isCmd}" == "true" ]] && [[ ${#startList[@]} != ${indexPos} ]]; then
            # echo -e "start_top"
            local var="${startList[${indexPos}+1]}"
        elif [[ "${isCmd}" == "false" ]]; then
            # echo -e "start_bottom"
            # echo -e $i
            local var="${i}"
        fi
        # echo -e "${window_length}"
        # if [[ "${i,,}" == "-w" ]] || [[ ! -v ${window_length} ]]; then ##Window expansion size
        if [[ "${i,,}" == "-w" ]] || [[ ${window_length} == $i ]]; then ##Window expansion size
            # echo -e "ISN'T EMPTY"
            # echo $i
            if [[ "$var" =~ ^[0-9]+$ ]]; then ##Checks if it's a number, max expansion of 1000.
                if (( "$var" >= 1)); then ##Changed from 2 to 1
                    ((projectDic["windowLength"]+="$var"))
                    frontgate=1 
                    unset window_length
                fi
            else
                echo -e "\nPlease enter a valid integer for window expansion size, defaulting to 1 bases or flank size.\n"
            fi
        elif [[ "${i,,}" == "-i" ]] || [[ ${input_file} == $i ]]; then ##Input file which grabs the input file name, location and complete file path
            # echo -e "IT'S BIG!" 
            if [[ "${var##*.}" == "vcf" ]] && [ -f "$var" ]; then ##Checks if it's VCF and if file exist
                projectDic["inputFile"]+="$var"
                projectDic["inputLoc"]+="${var%/*}"
                local filename=${var%.*} ##removes files extension
                filename=${filename##*/} ##removes file path
                projectDic["filename"]+="$filename"
                frontgate=1
                unset input_file
            else
                echo -e "\nERROR. Incorrect file input. Check file or directory path. (Input (.vcf) only)\nEXITING...\n"
                exit 1
            fi
        elif [[ "${i,,}" == "-o" ]] || [[ ${output_location} == $i ]]; then ##output location info
            if [ -d "$var" ]; then ##Checks if directory exist, if not it will save to input file location
                if [[ "${var: -1}" == "/" ]]; then
                    projectDic["outputLoc"]+="$var"
                else
                    projectDic["outputLoc"]+="$var"/
                fi
                frontgate=1
                unset output_location
            fi
        elif [[ "${i,,}" == "-p" ]] || [[ ${project_name} == $i ]]; then ##Project name
            projectDic["projectName"]="$var"
            frontgate=1
            unset project_name
        elif [[ "${i,,}" == "-f" ]] || [[ "${flanks}" == $i ]]; then ##Flank sizes for mutation motif's aln_to_counts func
            if [[ "$var" =~ ^[0-2]+$ ]]; then ##Checks if it's a number and if it's between 0 and 2
                ((projectDic["flanks"]+="$var"))
            else
                echo -e "\nFlanks have to be between: 0 - 2. Defaulting to 0.\n"
            fi
            frontgate=1
            unset flanks
        elif [[ "${i,,}" == "-r" ]] || [[ ${referenceGenome} == $i ]]; then ##Which reference genome needed for FASTA file creation
            if [[ -f "${var}" ]]; then
                projectDic["referenceGenome"]="${var}"
                frontgate=1
            else
                echo -e "Enter a valid reference genome."
                exit 1
            fi
            unset referenceGenome
        elif [[ "${i,,}" == "-n"  ]] || [[ "${indel_max_amount}" == $i ]]; then
            if [[ "$var" =~ ^[0-9]+$ ]]; then ##CHECK WITH PETER!!!
                if (( "${var}" >= 25  && "$var" <= 100 )); then
                    ((projectDic["nMax"]+="$var"))
                elif (( "${var}" < 25 )); then
                    echo -e "\nMinimum N threshold is 25. Defaulting to 25% threshold."
                    ((projectDic["nMax"]+=25))
                elif (( "${var}" > 100 )); then
                    echo -e "\nMaximum N threshold is 100. Defaulting to 100% threshold."
                    ((projectDic["nMax"]+=100))
                fi
                frontgate=1
                unset indel_max_amount                 
            fi
            # if [[ "$var" =~ ^[0-9]+$ ]]; then
            #     if (( "${var}" >= 0  && "$var" <= 100 )); then
            #         ((projectDic["nMax"]+="$var"))
            #     elif (( "${var}" < 0 )); then
            #         echo -e "\nMinimum N threshold is 1. Defaulting to 1% threshold."
            #         ((projectDic["nMax"]+=1))
            #     elif (( "${var}" > 100 )); then
            #         echo -e "\nMaximum N threshold is 75. Defaulting to 100% threshold."
            #         ((projectDic["nMax"]+=100))
            #     fi
            #     frontgate=1                    
            # fi
        elif [[ "${i,,}" == "-ad"  ]] || [[ ${save_all_data} == $i ]]; then
            projectDic["allData"]="${var,,}"
            frontgate=1
            unset save_all_data
        elif [[ "${i,,}" == "-s3" ]] || [[ ${save_S3} == $i ]]; then ## ADD A CHECK FOR USERNAME AND PASSWORD
            projectDic["s3"]="${var,,}"
            frontgate=1
            unset save_S3
        fi
        ((indexPos+=1))
    done
    if ((${frontgate} <= 0)); then
        echo -e "\nPlease enter valid arguments. None were valid.\n"
        exit 1
    fi
    if [[ ${projectDic["inputFile"]} == '' ]]; then
        echo -e "\nNo input file or working directory specified.\nEXITING...\n"
        exit 1
    fi
    if [[ -z ${projectDic["outputLoc"]} ]] && [[ ${projectDic["inputFile"]} != '' ]]; then
        echo -e "\nNot a valid output location. Re-routing to input file location.\n"
        projectDic["outputLoc"]+=${projectDic["inputLoc"]}
    fi
    if [[ ${projectDic["referenceGenome"]} == "" ]]; then
        echo -e "No reference genome enetered. Exiting..."
        exit 1
    fi
    if (( ${projectDic["flanks"]} > ${projectDic["windowLength"]} )); then
        # ((projectDic["nMax"]+=25))
        ${projectDic["windowLength"]}=${projectDic["flanks"]}
    fi
    # if [[ $isCmd == "false" ]]; then
    #     for clean in ${cleanUp[@]}; do #clears out global variables I wont be using later.
    #         unset "${clean}"
    #     done
    # fi
    unset startList
}

main(){
    config_check "$@"
    
    echo -e
    for u in ${projectDic[@]}; do
        echo -e "${u}"
    done
}

main "$@"