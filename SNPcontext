#!/bin/bash

starter(){ #grabs the arguments
    windowLength=0
    inputFile=''
    inputLoc=''
    outputLoc=''
    filename=''
    if [ "$#" -ge 1 ]; then
        for i in $@; do
            if [ "${i##*.}" == "vcf" ]; then
                inputLoc=${i%/*}
                inputFile=$i
            elif [[ -d "$i" && ! -e "$i" ]]; then
                outputLoc=$i
            else
                windowLength=$i
            fi
        done
        if [ -z "$filename" ]; then
            arg1=$1
            filename=${arg1%.*}
            filename=${filename##*/}
        fi
        if [ -z "$outputLoc" ]; then
            outputLoc=${inputFile%/*}
        fi
    else
        echo -e "\nNo file or working directory specified."
        echo -e "EXITING...\n"
        exit 1
    fi
}

moduleLoader(){ #load modules need for operations

    module load R
    module load gatk_ML/3.8.0
    module load vcftools_ML/0.1.14
    # module load python3_ML/2.7.13
    module load python3_ML/3.6.1
    module load bedops_ML/2.4.20
    module load bedtools_ML/2.23.0

}

fileConverter(){
    referenceGenome='/home/morrellp/shared/References/Reference_Sequences/Barley/Morex/barley_RefSeq_v1.0/150831_barley_pseudomolecules.fasta'    
    vcf2bed < "${inputFile}" > "${outputLoc}"/sorted-"${filename}".bed
    bedtools getfasta -fi "${referenceGenome}" -bed "${outputLoc}"/sorted-"${filename}".bed -fo "${outputLoc}"/"${filename}".fasta.out
    # if [[ ${i##*.} == ".vcf" ]] ;then
    #     vcf2bed --input=vcf < "${inputFile}" > "${outputLoc}"/sorted-"${$filename}".bed
        #Add BED to FASTA conversion here
    # else if ["${i##*.}" = '.bed']
        #Use this to convert from bed to FASTA
    # fi
}

# pythonBEDScanner(){
# tableOut=$(python -<<END_OF_PYTHON
    
# table="Hello world"
# print("tableOut={}".format(table))

# END_OF_PYTHON
# )
#     # echo -e "TEST"
#     eval $tableOut
#     echo -e ${tableOut}
# }

# pythonBEDScanner(){
#     test=''
#     tableOut=$(python3 - <<END_OF_PYTHON
# var="Test"
# test={}.format(var)
# END_OF_PYTHON
#     )

#     eval $tableOut
#     echo -e ${tableOut}
# }

pythonBEDScanner(){
listing=[]
eval $(python3 - <<EOF
testList=[1,2,3,4,5,6,7]
return(listing=testList)
EOF
)

# eval $myvar
echo $listing

}

mainOne(){
    moduleLoader
    starter "$@"
    fileConverter "$inputFile" "$outputLoc" "$filename"
    pythonBEDScanner
}

mainOne "$@"